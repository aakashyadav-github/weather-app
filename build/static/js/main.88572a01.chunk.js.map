{"version":3,"sources":["api/Api.js","api/formUrl.js","Components/WeatherCard.jsx","App.js","index.js"],"names":["api","axios","create","baseURL","process","interceptors","request","use","config","console","log","url","error","Promise","reject","response","formUrl","params","WeatherCard","props","length","className","weatherData","name","weather","description","src","icon","alt","main","temp","wind","speed","pressure","humidity","App","useState","cityName","setCityName","setWeatherData","setError","claaName","value","type","placeholder","onChange","e","target","onClick","completeURL","get","then","data","status","catch","err","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAGMA,E,OAAMC,EAAMC,OAAO,CACvBC,QAASC,4CAIXJ,EAAIK,aAAaC,QAAQC,KACvB,SAAUC,GAGR,OAFAC,QAAQC,IAAIF,EAAOG,KAEZH,KAET,SAAUI,GACR,OAAOC,QAAQC,OAAOF,MAK1BZ,EAAIK,aAAaU,SAASR,KACxB,SAAUQ,GAER,OAAOA,KAET,SAAUH,GAGR,OADAH,QAAQC,IAAI,uBAAwBE,GAC7BC,QAAQC,OAAOF,MAIXZ,QC5BAgB,EAJC,SAACC,GACf,MAAM,GAAN,OAAUA,EAAV,kBAA0Bb,mCAA1B,kB,OCsCac,EApCK,SAACC,GAIjB,OAAGA,EAAMP,MAAMQ,OAAS,EAGpB,sBAAKC,UAAU,+IAAf,UACA,oBAAGA,UAAU,6CAAb,UAA2DF,EAAMP,MAAjE,OACA,mBAAGS,UAAU,4DAOb,sBAAKA,UAAU,yIAAf,UACA,mBAAGA,UAAU,6CAAb,0BACA,mBAAGA,UAAU,+CAAb,SAA6DF,EAAMG,YAAYC,OAC/E,oBAAGF,UAAU,kDAAb,kBAAqEF,EAAMG,YAAYE,QAAQ,GAAGC,eAClG,sBAAKJ,UAAU,uDAAf,UACA,qBAAKA,UAAU,uCAAuCK,IAAG,UAnBzCtB,qCAmByC,OAAqBe,EAAMG,YAAYE,QAAQ,GAAGG,KAAlD,WAAiEC,IAAI,iBAC9H,oBAAGP,UAAU,mEAAb,UAAkFF,EAAMG,YAAYO,KAAKC,KAAzG,aACA,sBAAKT,UAAU,4CAAf,UACE,oBAAGA,UAAU,kEAAb,UAAiFF,EAAMG,YAAYS,KAAKC,MAAxG,UACA,oBAAGX,UAAU,kEAAb,UAAiFF,EAAMG,YAAYO,KAAKI,SAAxG,YACA,oBAAGZ,UAAU,kEAAb,UAAiFF,EAAMG,YAAYO,KAAKK,SAAxG,kB,MC4BKC,MA1Cf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEyBF,mBAAS,IAFlC,mBAENd,EAFM,KAEOiB,EAFP,OAGaH,mBAAS,IAHtB,mBAGNxB,EAHM,KAGC4B,EAHD,KAqBb,OACE,sBAAKC,SAAS,MAAd,UACE,mBAAGpB,UAAU,mEAAb,yBACE,qBAAKA,UAAU,0CAAf,SACE,uBAAMA,UAAU,uBAAhB,UAEA,sBAAKA,UAAS,qCAAgCT,EAAMQ,OAAS,EAAI,iBAAmB,kBAAtE,UAAd,UACE,uBAAOsB,MAAOL,EAAUhB,UAAU,kHAAkHsB,KAAK,OAAOC,YAAY,kBAAkBC,SAAU,SAACC,GAAD,OAAOR,EAAYQ,EAAEC,OAAOL,UACpO,wBAAQrB,UAAS,wBAAmBT,EAAMQ,OAAS,EAAI,kEAAoE,sEAA1G,mDAAkOuB,KAAK,SAASK,QAzBxP,WAEjB,IAAIC,EAAcjC,EAAQ,aAAD,OAAcqB,IACvCrC,EAAIkD,IAAID,GAAaE,MAAK,SAAAC,GAEL,MAAhBA,EAAKC,SACNb,EAAS,IACTD,EAAea,EAAKA,MACpB3C,QAAQC,IAAI,eAAgB0C,EAAKA,UAElCE,OAAM,SAAAC,GAEPf,EAASe,EAAIxC,SAASqC,KAAKI,SAC3B/C,QAAQC,IAAI,MAAO6C,EAAIxC,SAASqC,KAAKI,aAY/B,4BAID5C,EAAMQ,OAAS,GAAK,mBAAGC,UAAU,mCAAb,qCAItBC,GAAe,cAAC,EAAD,CAAaA,YAAaA,EAAaV,MAAOA,QC/CtE6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.88572a01.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// initialise axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_WEATHER_API_BASE_URL\n});\n\n// Add a request interceptor\napi.interceptors.request.use(\n  function (config) {\n    console.log(config.url)\n    // if any custom headers needs to be attached\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor\napi.interceptors.response.use(\n  function (response) {\n    // if response is truthly return response\n    return response;\n  },\n  function (error) {\n    // return error\n    console.log('before setting error', error);\n    return Promise.reject(error);\n  }\n);\n\nexport default api;","const formUrl = (params) => {\n  return `${params}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\n}\n\nexport default formUrl","\nimport React from \"react\";\n\nconst WeatherCard = (props) => {\n  // set a const and get icon URL from env file\n  const ICON_BASE_URL = process.env.REACT_APP_WEATHER_ICON_URL\n  // TO DO - error boundary could be set \n    if(props.error.length > 0) {\n      // if error prop has data\n      return (\n        <div className=\"flex flex-col items-center mt-10 mx-8 px-8 py-10 shadow-lg rounded-lg card-error-gradient md:mx-40 lg:w-5/12 xl:w-5/12 lg:mx-auto xl:mx-auto\">\n        <p className=\"text-xl font-sans font-semibold text-white\">{props.error} </p>\n        <i className=\"mt-4 text-6xl text-white fas fa-exclamation-triangle\"></i>\n      </div>\n      )\n    }\n    else {\n      // id weatherData prop has value\n      return (\n        <div className=\"flex flex-col items-center mt-10 mx-8 px-8 py-10 shadow-lg rounded-lg card-gradient md:mx-20 lg:w-5/12 xl:w-5/12 lg:mx-auto xl:mx-auto\">\n        <p className=\"text-xl font-sans font-semibold text-white\">Right Now in</p>\n        <p className=\"mt-4 text-2xl font-sans font-bold text-white\">{props.weatherData.name}</p>\n        <p className=\"mt-4 text-xl font-sans font-semibold text-white\">It's {props.weatherData.weather[0].description}</p>\n        <div className=\"md:flex-row md:gap-5 mt-4 flex flex-col items-center\">\n        <img className=\"w-full md:w-3/12 lg:w-4/12 xl:w-4/12\" src={`${ICON_BASE_URL}${props.weatherData.weather[0].icon}@4x.png`} alt=\"weather Icon\"/>\n        <p className=\"mt-4 md:mt-0 text-4xl md:text-4xl font-sans font-bold text-white\" >{props.weatherData.main.temp} &#8451;</p>\n        <div className=\"flex flex-col items-center md:items-start\">\n          <p className=\"mt-4 md:mt-0 text-2xl md:text-xl font-sans font-bold text-white\" >{props.weatherData.wind.speed} m/s</p>\n          <p className=\"mt-2 md:mt-0 text-2xl md:text-xl font-sans font-bold text-white\" >{props.weatherData.main.pressure} mm hg</p>\n          <p className=\"mt-2 md:mt-0 text-2xl md:text-xl font-sans font-bold text-white\" >{props.weatherData.main.humidity} %</p>\n        </div>\n        </div>\n      </div>\n      )\n    }\n    \n  } \n\n\nexport default WeatherCard\n","// weather app\n// api key - done\n// apiwrapper - done\n// responsiveness - done\n// api Integration - done\n// validation and error handling - done\n// icon mapping - done\n\nimport React, { useState } from 'react';\nimport api from \"./api/Api\"\nimport formUrl from './api/formUrl'\nimport WeatherCard from \"./Components/WeatherCard\"\n\nimport './App.css';\n\nfunction App() {\n  const [cityName, setCityName] = useState('')\n  const [weatherData, setWeatherData] = useState('')\n  const [error, setError] = useState('')\n  const getWeather = () => {\n    // api call get weather data for a city\n    let completeURL = formUrl(`weather?q=${cityName}`)\n    api.get(completeURL).then(data => {\n      // if success\n      if(data.status === 200) {\n        setError('')\n        setWeatherData(data.data)\n        console.log('weather data', data.data)\n      } \n    }).catch(err => {\n      // if error\n      setError(err.response.data.message)\n      console.log('err', err.response.data.message)\n    })\n  }\n\n  return (\n    <div claaName=\"App\"> \n      <p className=\"mt-10 text-4xl font-mono font-semibold text-center text-blue-900\" >Weather app</p>\n        <div className=\"flex flex-col items-center mt-8 mx-auto\">\n          <form className=\"w-full max-w-sm px-8\">\n            {/* Dynamic error binding */}\n          <div className={`flex items-center border-b ${error.length > 0 ? \"border-red-500\" : \"border-blue-500\"} py-2 `}>\n            <input value={cityName} className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\" type=\"text\" placeholder=\"Enter City Name\" onChange={(e) => setCityName(e.target.value)}></input>\n            <button className={`flex-shrink-0 ${error.length > 0 ? \"bg-red-500 hover:bg-red-700 border-red-500 hover:border-red-700\" : \"bg-blue-500 hover:bg-blue-700 border-blue-500 hover:border-blue-700\"}  text-sm border-4 text-white py-1 px-2 rounded`} type=\"button\" onClick={getWeather}>\n              Get Weather\n            </button>\n          </div>\n          {error.length > 0 && <p className=\"text-sm font-normal text-red-500\" > Please Try Again </p>}\n        </form>\n        </div>\n        {/* Initially when weather data is empty dont show the card */}\n        {weatherData && <WeatherCard weatherData={weatherData} error={error}  />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}